[SPRITES LOGIC SECTION]
%%
    class Player: Sprite
    {
        public Player(Texture2D texture, Vector2 position, Camera camera, Vector2 middlePoint, Vector2 layoutSize) : base(texture, position) 
        {
            Behaviours.Add(new _8Directions());
            Behaviours.Add(new ScrollTo(camera, middlePoint, layoutSize));
            Behaviours.Add(new BoundToLayout(layoutSize));
        }  
    }

    class Bullet : Sprite
    {
        public Bullet(Texture2D texture, Vector2 position, Vector2 layoutSize) : base(texture, position)
        {
            Behaviours.Add(new BulletMovement(10));
            Behaviours.Add(new DestroyOutSideLayout(layoutSize));
        }
    }

    class Monster : Sprite
    {
        public int health = 5;

        public Monster(Texture2D texture, Vector2 position) : base(texture, position)
        {
            Behaviours.Add(new BulletMovement(3));
        }
    }

    class Explode : Sprite
    {
        public Explode(Texture2D texture, Vector2 position) : base(texture, position)
        {
            Behaviours.Add(new Fade(true, 2f, true));
        }
    }
^^
[VARIBLES SECTION]
%%
 //Textures
        private Texture2D playerTexture;
        private Texture2D bulletTexture;
        private Texture2D monsterTexture;
        private Texture2D explodeTexture;

        // Player values initialize
        private Sprite _player;

        // Global variable
        private int score = 0;

        private TextBox textBox;
^^
[INITIALIZE SECTION]
%%
            _windowSize = new Vector2(1920, 1080);
            _backgroundSize = new Vector2(3840, 2160);

            base.Initialize();

            _player = AddSprite(new Player(playerTexture, new Vector2(10, 10), _camera, _middleScreen, _backgroundSize));
            textBox = AddTextBox(new TextBox("Score: " + score, new Vector2(25, 25), font, Color.Yellow));
^^
[LOAD CONTENT SECTION]
%%
            _layout = LoadTextrure("Sprites/TiledBackground");
            font = LoadFont("Sprites/font");
            bulletTexture = LoadTextrure("Sprites/bullet");
            monsterTexture = LoadTextrure("Sprites/monster");
            playerTexture = LoadTextrure("Sprites/player");
            explodeTexture = LoadTextrure("Sprites/explode");
^^
[UPDATE SECTION]
%%

            // Every tick
            if (Conditions.EveryTick())
            {
                // Player rotates to Mouse
                Actions.SetAngleForward(_player, Mouse.GetState().X, Mouse.GetState().Y, false);

                // Score changing
                Actions.SetText(textBox, "Score: " + score);
            }

            // Create new Bullet when Mouse.LeftButton clicked
            if (Conditions.OnMouseXButtonClicked(Conditions.MouseButton.Left, gameTime))
            {
                AddSprite(new Bullet(bulletTexture, _player.Position, _backgroundSize) { Rotation = _player.Rotation });
            }

            // Every 3 seconds create new Monster 
            if (Conditions.EveryXSeconds(gameTime, 3f))
            {
                AddSprite(new Monster(monsterTexture, new Vector2(1400, random.Next(1024))) { Rotation = (float)Math.PI });
            }


            ForEach<Bullet>(bullet =>
            {
                ForEach<Monster>(monster =>
                {
                    // If any Bullet collides with any Monster -> remove this Bullet and this Monster
                    if (Conditions.InCollisionWith(bullet, monster))
                    {
                        Bullet curBullet = (Bullet)bullet;
                        Monster curMonster = (Monster)monster;

                        AddSprite(new Explode(explodeTexture, curBullet.Position) { Color = new Color(255, 255, 255, 0) } );
                        Actions.Destroy(curBullet);
                        curMonster.health--;
                        if (curMonster.health == 0)
                        {
                            Actions.Destroy(curMonster);
                            score++;
                        }
                    }
                });
            });

            // If Monster is outside layout -> rotate to Players position
            // If Monster collides with Player -> remove Player
            ForEach<Monster>(monster =>
            {
                if (Conditions.IsOutsideLayout(monster, _backgroundSize))
                {
                    Actions.SetAngleForward(monster, _player.Position.X, _player.Position.Y, IsGlobal: true);
                }
                if (Conditions.InCollisionWith(monster, _player))
                {
                    Actions.Destroy(_player);
                }
            });
^^