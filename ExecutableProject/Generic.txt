using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using MonogameLib.Behaviours;
using MonogameLib.Classes;
using System;

namespace TestProject
{

    public class Player : Sprite 
    {
        
        public Int32 speed; public Camera camera; public Int32 windowSizeX; public Int32 windowSizeY; public Int32 layoutSizeX; public Int32 layoutSizeY; public Boolean IsEdge; 
        public Player (Texture2D texture, int positionX, int positionY ) : base(texture, positionX, positionY)
        {
            
            Behaviours.Add(new _8Directions( speed));

            Behaviours.Add(new ScrollTo( camera, windowSizeX, windowSizeY, layoutSizeX, layoutSizeY));

            Behaviours.Add(new BoundToLayout( layoutSizeX, layoutSizeY, IsEdge));

        }

        public override void Update(GameTime gameTime) 
        {
            for (int i = 0; i < Behaviours.Count; i++) 
            {
                
            if (Behaviours[i] is _8Directions)
                Behaviours[i] = new _8Directions( speed);

            if (Behaviours[i] is ScrollTo)
                Behaviours[i] = new ScrollTo( camera, windowSizeX, windowSizeY, layoutSizeX, layoutSizeY);

            if (Behaviours[i] is BoundToLayout)
                Behaviours[i] = new BoundToLayout( layoutSizeX, layoutSizeY, IsEdge);

            }
            base.Update(gameTime);
        }
    }

    public class Bullet : Sprite 
    {
        
        public Int32 speed; public Int32 layoutSizeX; public Int32 layoutSizeY; 
        public Bullet (Texture2D texture, int positionX, int positionY ) : base(texture, positionX, positionY)
        {
            
            Behaviours.Add(new BulletMovement( speed));

            Behaviours.Add(new DestroyOutSideLayout( layoutSizeX, layoutSizeY));

        }

        public override void Update(GameTime gameTime) 
        {
            for (int i = 0; i < Behaviours.Count; i++) 
            {
                
            if (Behaviours[i] is BulletMovement)
                Behaviours[i] = new BulletMovement( speed);

            if (Behaviours[i] is DestroyOutSideLayout)
                Behaviours[i] = new DestroyOutSideLayout( layoutSizeX, layoutSizeY);

            }
            base.Update(gameTime);
        }
    }

    public class Monster : Sprite 
    {
        public 		int health = 5;

        public Int32 speed; 
        public Monster (Texture2D texture, int positionX, int positionY ) : base(texture, positionX, positionY)
        {
            
            Behaviours.Add(new BulletMovement( speed));

        }

        public override void Update(GameTime gameTime) 
        {
            for (int i = 0; i < Behaviours.Count; i++) 
            {
                
            if (Behaviours[i] is BulletMovement)
                Behaviours[i] = new BulletMovement( speed);

            }
            base.Update(gameTime);
        }
    }

    public class Explode : Sprite 
    {
        
        public Boolean active; public Int32 fadeOutTime; public Boolean destroyAfter; 
        public Explode (Texture2D texture, int positionX, int positionY ) : base(texture, positionX, positionY)
        {
            
            Behaviours.Add(new Fade( active, fadeOutTime, destroyAfter));

        }

        public override void Update(GameTime gameTime) 
        {
            for (int i = 0; i < Behaviours.Count; i++) 
            {
                
            if (Behaviours[i] is Fade)
                Behaviours[i] = new Fade( active, fadeOutTime, destroyAfter);

            }
            base.Update(gameTime);
        }
    }

	
    class GameTest : ConstructorGame
    {
	
		Texture2D playerTexture;
		Texture2D bulletTexture;
		Texture2D monsterTexture;
		Texture2D explodeTexture;
		Player player;
		TextBox textBoxScore;
		TextBox textBoxBullets;
		Bullet bullet;
		Monster monster;
		int bullets = 100;
		int score = 0;

		
        protected override void Initialize()
        {
            base.Initialize();

			windowSizeX = 1920;
			windowSizeY = 1080;
			layoutSizeX = windowSizeX * 2;
			layoutSizeY = windowSizeY * 2;
			
			
			player = new Player(playerTexture,10,10);  sprites.Add(player);
			player.speed = 4;
			player.camera = _camera;
			player.windowSizeX = windowSizeX;
			player.windowSizeY = windowSizeY;
			player.layoutSizeX = layoutSizeX;
			player.layoutSizeY = layoutSizeY;
			player.IsEdge = true;
			textBoxScore = new TextBox(font ,25,25,"Score: ");  sprites.Add(textBoxScore);
			textBoxScore.text = textBoxScore.text + bullets;
			textBoxBullets = new TextBox(font ,25,50,"Count bullets: ");  sprites.Add(textBoxBullets);
			textBoxBullets.text = textBoxBullets.text + score;
 

            ApplyWindowChanges();
        }

        protected override void LoadContent()
        {
			playerTexture = LoadTextrure("player");
			bulletTexture = LoadTextrure("bullet");
			monsterTexture = LoadTextrure("monster");
			explodeTexture = LoadTextrure("explode");
			layoutTexture = LoadTextrure("TiledBackground");


            base.LoadContent();
        }

        protected override void Update(GameTime gameTime)
        {
if (Conditions.EveryTick()) { Actions.SetAngleForward(player,Mouse.X,Mouse.Y,false);textBoxBullets.text = "Count bullets: " + bullets;;textBoxScore.text = "Score: " + score;; }if (Conditions.OnMouseLeftClicked(gameTime)) { bullet = new Bullet(bulletTexture,player.PositionX,player.PositionY);  sprites.Add(bullet);;bullet.speed = 10;;bullet.layoutSizeX = layoutSizeX;;bullet.layoutSizeY = layoutSizeY;;bullet.Rotation = player.Rotation;;bullets = bullets - 1;; }if (Conditions.EveryXSeconds(gameTime,3)) { 		int rand = getRandom(1024);
;monster = new Monster(monsterTexture,1400,rand);  sprites.Add(monster);;monster.Rotation = 180;;monster.speed = 4;; }

            base.Update(gameTime);
        }
    }
}

